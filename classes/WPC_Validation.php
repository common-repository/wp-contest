<?php /*  * 	@PACKAGE WP CONTEST*	USE: USE FOR VALIDATE ENTRIES*/if(!class_exists('WPC_Validation')){	class WPC_Validation{		private $error = null;			/*	*	@param $_FILES  array	*/	public  function wpc_upload_validation ($files){		//GENERAL SETTINGS			$general_settings = get_option( 'wpc_general_settings' );		//CONTEST SETTINGS			$WPC_contest_settings = new WPC_contest_settings( absint( sanitize_text_field($_POST['contest_id'])) );		$settings = $WPC_contest_settings->WPC_the_contest_settings();				$allowed_file_ext = explode( ',', $settings['file_types']);		$max_size = 1046076 * $general_settings['upload_size'];		$max_num_files = $settings['max_num_files'];		$titles =  $_POST['title'];		$tos =  $_POST['tos'] ;		$categories =  $_POST['category'];		$descriptions = $_POST['description'] ;				/*==============================			Veryfy nonce first		=================================*/ 		if(  ! isset( $_POST['wpc_up_load_entry_field'] ) || ! wp_verify_nonce( $_POST['wpc_up_load_entry_field'], 'wpc_up_load_entry_action' ) ){			$this->error = __('your nonce did not verified', 'wpc');			return false;		}		/*==============================		throw error if user not logged in		=================================*/ 		if(!is_user_logged_in()){			$this->error = __('Only loggedin user can upload photos.', 'wpc');			return false;		}				/*==============================+++++++++++++++++++++		throw error if current user has no upload capability		=================================+++++++++++++++++++*/ 		if($settings['who_can_upload'] == 'wpc_contestant' && !in_array( 'wpc_contestant',  wp_get_current_user()->roles) ){			$this->error = __('Only contestant Can Upload Photos for this Contest.', 'wpc');			return false;		}		/*==============================+++++++++++++++++++++		throw error if user try to upload on Invalid Contest		=================================+++++++++++++++++++*/ 		if(!wpc_if_contest_exist(absint( sanitize_text_field( $_POST['contest_id'] ) )) ){			$this->error = __('Contest Not Found.', 'wpc');			return false;		}				/*==============================++++++++++		throw  if user not accept term & Condition		=================================+++++++++*/ 		if(!isset($tos) || $tos !== 'on'){			$this->error = __('Please accept terms and Condition.', 'wpc');			return false;		}		/*======================================			throw error if title field is empty			=======================================*/ 			foreach($titles as $pos => $title){				if($title = '' || empty($title)){					$this->error = __('Add title to all photos', 'wpc');					return false;				}			}					/*======================================			throw error if category field is empty			=======================================*/ 			foreach($categories as $pos => $category){				if($category = '' || empty($category)){					$this->error = __('Please Select a category', 'wpc');					return false;				}			}		/*======================================		throw error if description field is empty		=======================================*/		foreach($descriptions as $pos => $description){			if($description = '' || empty($description)){				$this->error = __('Please add description to all photos', 'wpc');				return false;			}		}				/*======================================		throw error if user not select any file to any upload field		=======================================*/		if(empty($files['name'][0])){			$this->error = __('Please select a file to upload.', 'wpc');			return false;		}		/*======================================		throw error if file size greater than allowed maximum upload size		=======================================*/		if(count($files['name']) > $max_num_files ){			$this->error = __('You can not upload more than '.$max_num_files.' files at a time', 'wpc');			return false;		}				foreach($files['name'] as $position => $file_name){			/*======================================			 (recheck) throw error if user not select any file to any upload field			 =======================================*/			 if($file_name = '' || $files['size'][$position] == 0 ){			 	$abs_pos = $position + 1;			 	$this->error = __("Select an image for $abs_pos  upload ", "pop");			 	return false;			 }			 			 $file_temp = $files['tmp_name'][$position];			 $file_size = $files['size'][$position];			 $file_error = $files['error'][$position];			 $file_type = $files['name'][$position];			 $name = $files['name'][$position];			 $file_ext = explode('.', $file_type);			 $file_ext = strtolower( end( $file_ext ) );			 $file_ext = strtolower( $file_ext );			/*======================================			 throw error if file extension not allowed			 =======================================*/			 if(!in_array( $file_ext,  $allowed_file_ext)){			 	$this->error = __( $name.' file extention ('.$file_ext.') not allowed', 'wpc' );			 	return false;			 }			/*======================================			 throw error if file greater than allowed file fize			 =======================================*/			 if($file_size > $max_size){			 	$this->error = __( $name.' is too large to upload', 'wpc');			 	return false;			 }			/*======================================			 throw error if caught any error on file loading			 =======================================*/			 if($file_error != 0){			 	$this->error = __( 'Error Loading file '.$name, 'wpc');			 	return false;			 }			}					/*======================================			VALIDATE ADDITIONAL FIELDS			=======================================*/				$addtional_fields = wpc_get_addtional_field_by_contest_id(  absint( sanitize_text_field( $_POST['contest_id'] ) ));			if( !empty($addtional_fields) && $addtional_fields != '' ){				$addtional_fields = unserialize($addtional_fields);				foreach($addtional_fields as $addtional_field){					$id = $addtional_field['id'];					$type = $addtional_field['type'];					$label = $addtional_field['label'];					$placeholder = isset($addtional_field['placeholder']) ? isset($addtional_field['placeholder']) : '';					$options = isset($addtional_field['options']) ? $addtional_field['options'] : '';					$require = isset($addtional_field['require']) ? 'on' : 'off';					if($require == 'on'){						foreach($_POST[$id] as $position => $_value){							if(!isset($_POST[$id][$position])){								$this->error = __('Fillup All Require Fileds', 'wpc');								return false;							}							if($_POST[$id][$position] == ''){								$this->error = __( 'Fillup All Require Fileds', 'wpc');								return false;							}						}					}					foreach($_POST[$id] as $position => $_value){						if($type == 'number' && isset($_POST[$id][$position]) && !is_numeric ($_POST[$id][$position])){														$this->error = __('Number Field Should Be numeric value', 'wpc');							return false;													}						if($type == 'radio' && isset($_POST[$id][$position])){							$options_radio = explode(",", $options);							if(!in_array($_value, $options_radio)){								$this->error = __('Invalid Option', 'wpc');								return false;							}													}												if($type == 'dropdown' && isset($_POST[$id][$position])){							$options_dropdown = explode(",", $options);							if(!in_array($_value, $options_dropdown)){								$this->error = __('Invalid Option', 'wpc');								return false;							}													}																							}														}				}			return true;		}	// return error		public  function error (){			return $this->error;		}			}}