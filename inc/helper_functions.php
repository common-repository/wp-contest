<?php /*  * 	@PACKAGE WP CONTEST*	USE: plugin functions */if(!function_exists('wpc_stripout_spcl_char')){	function wpc_stripout_spcl_char($string){		$string = preg_replace('/[^a-zA-Z0-9-_\.]/','', $string);		return $string;	}}if(!function_exists('wpc_pdf_dir')){	function wpc_pdf_dir(){		return WP_CONTENT_DIR . '/uploads/pop_pdf/';	}}if(!function_exists('wpc_upload_dir_url')){	function wpc_upload_dir_url(){				return apply_filters( 'wpc_upload_dir_url', '');	}}if(!function_exists('wpc_db_inserts')){	function wpc_db_inserts( $table_name, $insert_values, $format  ){		global $wpdb;		$insert  = $wpdb->insert( $table_name, $insert_values, $format );		if($insert){			return true;		}else {			return false;		}			}}if(!function_exists('wpc_get_contest_id_by_entry_id')){	function wpc_get_contest_id_by_entry_id($entry_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_entry';		$contest_id = $wpdb->get_var( "SELECT contest_id FROM $table_name WHERE id='$entry_id' " );		return $contest_id;	}}if(!function_exists('wpc_phase_two_voting_criteria_template')){	function wpc_phase_two_voting_criteria_template(){		return '		<tr class="single_criteria" criteria_id="__UNIQID__">		<td>		<input name="criterias[]" type="text" class="single_criteria_label" value="Criteria Label">		</td>		<td>		1 <input name="__UNIQID___radio" type="radio">		2 <input name="__UNIQID___radio" type="radio">		3 <input name="__UNIQID___radio" type="radio">		</td>		<td>		4 <input name="__UNIQID___radio" type="radio">		5 <input name="__UNIQID___radio" type="radio">		5 <input name="__UNIQID___radio" type="radio">		7 <input name="__UNIQID___radio" type="radio">		</td>		<td>		8 <input name="__UNIQID___radio" type="radio">		9 <input name="__UNIQID___radio" type="radio">		10 <input name="__UNIQID___radio" type="radio">				</td>		<td> 		<span title="Remove Criteria" criteria_id="__UNIQID__" id="remove_criteria">-</span>		</td>				</tr>				';	}}if(!function_exists('wpc_conteset_settings_fields')){	function wpc_conteset_settings_fields(){		$settings_fields = array(			'contest_on_off' => 'off',			'max_num_files' => 10,			'file_types' => 'jpg,pdf',			'upload_cost' => 10,			'maximum_entry' => 50,			'title_label' => 'Title',						'category_label' => 'Category',			'category_options' => array('Category 1', 'Category 2', 'Category 3', ),			'description_label' => 'Description',						'upload_label' => 'Max Upload Size 2MB',			'upload_type' => 'flie', 						'tos_page_id' => 0,			'current_phase' => 2,			'who_can_upload' => 'wpc_contestant',			'phsae_one_vote' => 'no',			'phase_one_oparetor' => '>=',			'phase_one_vote_count' => 2,			'contest_type' => 'free',					);		return apply_filters('wpc_conteset_settings_fields', $settings_fields );	}}if(!function_exists('wpc_voting_criteria')){	function wpc_voting_criteria(){		$voting_criteria = array(			'grades' =>	array( 'Need Improvement',				'Good',				'Exceptational'			),			'criteria' =>	array( 'Subject',				'Composition',				'Light/Exposer',				'Impact/Originality',			),					);		return apply_filters('wpc_voting_criteria', $voting_criteria );	}}if(!function_exists('wpc_if_contest_is_free')){	function wpc_if_contest_is_free($contest_id){		$WPC_contest_settings = new WPC_contest_settings($contest_id);		$settings = $WPC_contest_settings->WPC_the_contest_settings();		if($settings['contest_type'] == 'free'){			return true;		}				return false;		}}if(!function_exists('wpc_load_field_type')){	function wpc_load_field_type(){		$field_types = array(			'text' 		=> 'Text',			'number' 	=> 'Number',			'dropdown' 	=> 'Dropdown',			'radio' 	=> 'Radio',			'checkbox' 	=> 'Checkbox'		);		$field_types = apply_filters('pop_fields_type', $field_types );		return $field_types;	}}if(!function_exists('wpc_get_fields_type')){	function wpc_get_fields_type(){				$field_types = wpc_load_field_type();		$get_fields = '<div class="pop__fields"></div>';		foreach($field_types as $key => $val ){			$get_fields .= '<button field_type="'.$key.'" id="pop__field" class="pop__field">'.$val.'</button>';		}		$get_fields .= '</div>';		return $get_fields;	}}if(!function_exists('wpc_if_contest_exist')){	function wpc_if_contest_exist($contest_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_contests';		$selected_contest_id = $wpdb->get_var( "SELECT id FROM $table_name WHERE id='$contest_id'" );		if($selected_contest_id){			return $selected_contest_id;		}		return false;	}}if(!function_exists('wpc_list_pages_as_dropworn_options')){	function wpc_list_pages_as_dropworn_options( $selected_val = 0){		$the_query = new WP_Query( array('post_type'=>'page', 'post_status'=>'publish', 'posts_per_page'=> -1 ) );				if ( $the_query->have_posts() ) {			$output = '';			while ( $the_query->have_posts() ) {				$the_query->the_post();				$selected = (get_the_ID() == $selected_val) ? 'selected' : '';				$output .= '<option value="'.get_the_ID().'"  '.$selected.' >' . get_the_title() . '</option >';			}									wp_reset_postdata();		} else {			$output = '<option >No Page Found</option>';		}		return $output;	}}if(!function_exists('wpc_get_rows')){	function wpc_get_rows($table_name, $select = '*', $where = ''){		global $wpdb;		$results = $wpdb->get_results( 			"			SELECT  $select			FROM $table_name 			$where 			",			ARRAY_A		);		if($results){			return $results;		}	}}if(!function_exists('wpc_get_all_contest_id')){	function wpc_get_all_contest_id(){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_contests';		if(wpc_get_rows($table_name, 'id')){			$ids = array();			foreach(wpc_get_rows($table_name, 'id') as $id){				$ids[] = $id['id'];			}			return $ids;		}	}}if(!function_exists('wpc_get_contest_title')){	function wpc_get_contest_title($id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_contests';		$title = $wpdb->get_var( "SELECT title FROM $table_name WHERE id='$id' " );		if($title){			return $title;		}	}}if(!function_exists('wpc_get_pages_link')){	function wpc_get_pages_link($page_id){		if(get_the_permalink($page_id)){			return get_the_permalink($page_id);		}else{			return get_site_url();		}			}}if(!function_exists('wpc_contest_count_number_of_entry')){	function wpc_contest_count_number_of_entry($contest_id){		if(wpc_if_contest_is_free($contest_id)){			$payment = "";		}else{			$payment = " AND payment='1' ";		}		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_entry';		$count = $wpdb->get_var( "SELECT COUNT(*) FROM $table_name WHERE contest_id='$contest_id' $payment " );				return $count;			}}if(!function_exists('wpc_get_all_paid_entry_id_by_contest_id')){	function wpc_get_all_paid_entry_id_by_contest_id($contest_id){		if(wpc_if_contest_is_free($contest_id)){			$payment = "";		}else{			$payment = " AND payment='1' ";		}		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_entry';		$where = " WHERE contest_id='$contest_id'  $payment ORDER BY id DESC ";		if(wpc_get_rows($table_name, 'id', $where )){			$ids = array();			foreach(wpc_get_rows($table_name, 'id', $where) as $id){				$ids[] = $id['id'];			}			return $ids;		}	}}if(!function_exists('wpc_get_entryids_by_contest_id')){	function wpc_get_entryids_by_contest_id($contest_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_entry';		$where = " WHERE contest_id='$contest_id'";				if(wpc_get_rows($table_name, 'id', $where )){			$ids = array();			foreach(wpc_get_rows($table_name, 'id', $where) as $id){				$ids[] = $id['id'];			}			return $ids;		}			}}if(!function_exists('wpc_entry_pagination')){	function wpc_entry_pagination($all_entries_id, $current_display_entry_id, $contest_id){		if(count($all_entries_id) > 1){						$next = '';			$prev = '';			$current_key = array_search ($current_display_entry_id, $all_entries_id);			$first_key = 0;			$last_key  = count($all_entries_id) - 1;			if($current_key !== $first_key){				$prev_key = $current_key - 1;				$prev .= '<a  class="pop_prev" href="'.get_the_permalink().'?contest_id='.$contest_id.'&entry_id='.$all_entries_id[$prev_key].'">Prev</a>';			}			if($current_key !== $last_key){				$next_key = $current_key + 1;				$next .= '<a  class="pop_next" href="'.get_the_permalink().'?contest_id='.$contest_id.'&entry_id='.$all_entries_id[$next_key].'">Next</a>';			}			return '<div class="pop_pagination_wrap">'.$prev.$next.'</div>';		}	}}if(!function_exists('wpc_get_entry')){	function wpc_get_entry($entry_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_entry';		$entry_array = wpc_get_rows($table_name, '*', "WHERE id='$entry_id' ");		if($entry_array){			return $entry_array[0];		}	}}if(!function_exists('wpc_get_entry_if_paid')){	function wpc_get_entry_if_paid($entry_id){				if(wpc_if_contest_is_free(wpc_get_contest_id_by_entry_id($entry_id))){			$payment = "";		}else{			$payment = " AND payment='1' ";		}		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_entry';		$entry_array = wpc_get_rows($table_name, '*', "WHERE id='$entry_id' $payment ");		if($entry_array){			return $entry_array[0];		}	}}if(!function_exists('wpc_insert_row')){	function wpc_insert_row($table_name, array $values, array $values_format){		global $wpdb;		$insert = $wpdb->insert( $table_name, $values, $values_format );		if($insert){			return true;		}		return false;	}}if(!function_exists('wpc_the_image_voted_by_current_judge_in_phase_two')){	function wpc_the_image_voted_by_current_judge_in_phase_two($entry_id, $current_judge_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_phase_two_votiong';		$count = $wpdb->get_var( "SELECT COUNT(*) FROM $table_name WHERE entry_id='$entry_id' AND judge_id='$current_judge_id'" );		return $count;		if($count > 0){			return true;		}				return false;	}}if(!function_exists('wpc_update_row')){	function wpc_update_row($table_name, array $values, array $where, array $values_format, array $where_format ){		global $wpdb;		$update = $wpdb->update( $table_name, $values, $where, $values_format, $where_format );		if($update){			return true;		}		return false;	}}if(!function_exists('wpc_phase_two_image_vote_by_judge')){	function wpc_phase_two_image_vote_by_judge($entry_id, $judge_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_phase_two_votiong';		$vote = $wpdb->get_var( " SELECT vote FROM $table_name WHERE entry_id='$entry_id' AND judge_id='$judge_id' ");		return $vote;	}}if(!function_exists('wpc_get_judges')){	function wpc_get_judges(){		$args = array('role__in' => array('wpc_judge'));				return get_users( $args );	}}if(!function_exists('wpc_if_out_of_contest')){	function wpc_if_out_of_contest($entry_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_phase_one_votiong';		$WPC_contest_settings = new WPC_contest_settings(wpc_get_contest_id_by_entry_id($entry_id));		$settings = $WPC_contest_settings->WPC_the_contest_settings();		$phsae_one_vote = $settings['phsae_one_vote'];		$phase_one_oparetor = $settings['phase_one_oparetor'];		$phase_one_vote_count = $settings['phase_one_vote_count'];						$judges_id = wpc_get_judges();		$judges_ids = array();		if($judges_id){			foreach ($judges_id as $judge_id){				$judges_ids[] = $judge_id->ID;			}		}		if(!$judges_ids){ return false; }				$count = $wpdb->get_var( " SELECT COUNT(*) FROM $table_name WHERE `judge_id` IN ( ".implode(',', $judges_ids)." ) AND `entry_id`='$entry_id' AND vote='$phsae_one_vote' ");				switch ($phase_one_oparetor) {			case ">":			$return = ($count > $phase_one_vote_count   ) ? true : false;			return $return;			break;			case ">=":			$return = ($count >= $phase_one_vote_count   ) ? true : false;			return $return;			break;			case "<":			$return = ($count < $phase_one_vote_count ) ? true : false;			return $return;			break;			case "<=":			$return = ($count <= $phase_one_vote_count  ) ? true : false;			return $return;			break;			case "=":			$return = ($count = $phase_one_vote_count  ) ? true : false;			return $return;			break;			case "!=":			$return = ($count != $phase_one_vote_count  ) ? true : false;			return $return;			break;					}								return false;	}}if(!function_exists('wpc_entries_eligible_for_phase_two')){	function wpc_entries_eligible_for_phase_two($contest_id){		return wpc_get_all_paid_entry_id_by_contest_id($contest_id);		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_phase_one_votiong';		$judges_id = wpc_get_judges();		$judges_ids = array();		if($judges_id){			foreach ($judges_id as $judge_id){				$judges_ids[] = $judge_id->ID;			}		}		if(!$judges_ids){			return;		}		$total_num_judges = count($judges_ids) ? count($judges_ids) : 0;		$all_entries_id = wpc_get_all_paid_entry_id_by_contest_id($contest_id);		if(!$all_entries_id){			return;		}		foreach($all_entries_id as  $entry_id){			$total_votes_by_judges = $wpdb->get_var( " SELECT COUNT(*) FROM $table_name WHERE judge_id IN ( ".implode(',', $judges_ids)." ) AND entry_id='$entry_id'  ");				if(wpc_if_out_of_contest($entry_id)){								$all_entries_id = array_diff( $all_entries_id, array($entry_id) );			}elseif($total_votes_by_judges < $total_num_judges){												$all_entries_id = array_diff( $all_entries_id, array($entry_id) );			}else{							}		}		if($all_entries_id){			$entries = array();			foreach($all_entries_id  as $entry){				$entries[] = $entry;			}			return $entries;		}			}}if(!function_exists('wpc_the_judge_total_num_images_yet_to_vote_in_phase_two')){	function wpc_the_judge_total_num_images_yet_to_vote_in_phase_two($contest_id, $judge_id){		global $wpdb;		$photos_phase_two = wpc_entries_eligible_for_phase_two($contest_id);		if($photos_phase_two){			$table_name = $wpdb->prefix . 'wpc_phase_two_votiong';			$count = $wpdb->get_var( " SELECT COUNT(*) FROM $table_name WHERE entry_id IN ( ".implode(',', $photos_phase_two)." ) AND judge_id='$judge_id' ");			return count($photos_phase_two) - $count;		}		return 0;	}}if(!function_exists('wpc_phase_two_single_entry_info_box')){	function wpc_phase_two_single_entry_info_box($entry_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_phase_two_votiong';		$judges_id = wpc_get_judges();		$judges_ids = array();		if($judges_id){			$info = '<div class="vote_info">';			foreach ($judges_id as $judge){				$judge_id = $judge->ID;				$display_name = $judge->display_name;				$vote = $wpdb->get_var( " SELECT vote FROM $table_name WHERE judge_id='$judge_id' AND entry_id='$entry_id'  ");					if($vote){					$info .= '<h3>'.$display_name.': '.strtoupper ($vote).'</h3>';				}else{					$info .= '<h3>'.$display_name.': Not Voted Yet</h3>';				}							}			$info .= '</div>';			return $info;		}	}}if(!function_exists('wpc_get_score')){	function wpc_get_score($entry_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_phase_two_votiong';		$total_score = $wpdb->get_var( " SELECT SUM(vote) FROM $table_name WHERE entry_id='$entry_id'  ");		return $total_score; 	}}if(!function_exists('wpc_contest_user_all_entry_ids')){	function wpc_contest_user_all_entry_ids($contest_id, $user_id){		if(wpc_if_contest_is_free($contest_id)){			$payment = "";		}else{			$payment = " AND payment='1' ";		}		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_entry';		$results = $wpdb->get_results( "SELECT `id` FROM $table_name WHERE `contest_id`='$contest_id' AND `user_id`='$user_id' $payment ORDER BY id DESC", ARRAY_A );						if($results){						$ids = array();			foreach($results as $result){				$ids[] = $result['id'];			}			if(count($ids)){				return $ids;			}		}	}}if(!function_exists('wpc_edited_vote_entries')){	function wpc_edited_vote_entries($limit){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_phase_two_votiong';		$results = $wpdb->get_results( "SELECT * FROM $table_name WHERE  edit_reason  IS NOT NULL ORDER BY voting_time DESC LIMIT $limit ", ARRAY_A );		if($results){			return $results;		}	}}if(!function_exists('wpc_conditon_oparetors')){	function wpc_conditon_oparetors(){		$oparetors = array ('>','<','>=','<=','=','!=' );		return $oparetors;	}}if(!function_exists('wpc_get_contestants_in_options')){	function wpc_get_contestants_in_options(){				global $wpdb;		$table_name = $wpdb->prefix . 'wpc_entry';		$results = $wpdb->get_results( "SELECT user_id FROM $table_name ", ARRAY_A );		$users_pots = '<option value="all" >All Contestant</option>';		$users = array();		if($results){			foreach($results as $usr){				if(!in_array($usr['user_id'], $users)){					$users_pots .= '<option value="'.$usr['user_id'].'" >'.get_user_by('id', $usr['user_id'])->display_name.'</option>';				}				$users[] = $usr['user_id'];							}		}				return $users_pots;							}}if(!function_exists('wpc_get_contests_options')){	function wpc_get_contests_options(){		if(wpc_get_all_contest_id()){			$contests = '<select name="contest_id" id="searched_contest_id">';			$contests .= '<option value="all"> All Contest</option>';			foreach(wpc_get_all_contest_id() as $contest_id ){				$contests .= '<option value="'.$contest_id.'">'.wpc_get_contest_title($contest_id).'</option>';			}			$contests .= '</select>';			return $contests;		}	}}if(!function_exists('wpc_get_all_contest_all_categories')){	function wpc_get_all_contest_all_categories(){		if(wpc_get_all_contest_id()){			$categories = '<select name="pop_categories" id="pop_categories">';			$categories .= '<option value="all"> All Category</option>';			$catch_category = array();			foreach(wpc_get_all_contest_id() as $contest_id ){				$WPC_contest_settings = new WPC_contest_settings($contest_id);				$settings = $WPC_contest_settings->WPC_the_contest_settings();				$category_options = $settings['category_options'];				if(count($category_options)){					foreach($category_options as $opt){						if(!in_array($opt, $catch_category)){								$categories .= '<option contest_id="'.$contest_id.'" value="'.$opt.'">'.$opt.'</option>';						}						$catch_category[] = $opt;					}				}							}			$categories .= '</select>';			return $categories;		}	}}if(!function_exists('wpc_advance_search')){	function wpc_advance_search(){		if(isset($_GET['contest_id_submit'])){			$search_again = '<a href="'.get_the_permalink().'" class="button">Search Again</a>';			global $wpdb;									$table_name = $wpdb->prefix . 'wpc_entry';			$contest_id = 	sanitize_text_field($_GET['contest_id']);			$contesttant = 	sanitize_text_field($_GET['contesttant']);			$pop_categories = 	sanitize_text_field($_GET['pop_categories']);			if(empty($contest_id) || $contest_id == '' || empty($contesttant) || $contesttant == '' || empty($pop_categories) || $pop_categories == ''){																return;			}			$sql = "SELECT * FROM $table_name ";			if($contest_id == 'all' && $contesttant == 'all' ){				$sql .= "  ";			}elseif($contest_id != 'all' && $contesttant != 'all'){				$sql .= " WHERE contest_id='$contest_id' AND user_id='$contesttant'";			}elseif($contest_id != 'all' && $contesttant == 'all'){				$sql .= " WHERE contest_id='$contest_id' ";			}else{				$sql .= " WHERE user_id='$contesttant' ";			}			$entries = $wpdb->get_results( $sql, ARRAY_A );	//return $sql;			if($entries){				$found_entries = '<table class="pop_search_result_table"  style="width:100%">				<tr>				<th>Entry</th>				<th>Contest</th> 				<th>Category</th>				<th>View</th>				</tr>';				foreach($entries as $entry){					$entry_id = $entry['id'];					$entry_values = wpc_get_entry($entry_id);					$entry_meta = unserialize( $entry_values['entry_meta'] );					$img_src = wpc_upload_dir_url().$entry_meta['image'];										if(!wpc_if_contest_is_free($entry['contest_id']) && $entry['payment'] == '1' ){						if( $pop_categories !== 'all'){							if( $pop_categories == $entry_meta['category']){								$found_entries .= ' <tr>								<td><img src="'.$img_src.'" alt="" /></td>								<td>'.get_user_by('id', $entry['user_id'])->display_name.'</td> 								<td>'.$entry_meta['category'].'</td>								<td><a target="_blank" href="'.get_the_permalink().'?entry_id='.$entry_id.'">View</a></td>								</tr>';							}						}else{							$found_entries .= ' <tr '.$entry['contest_id'].' >							<td><img src="'.$img_src.'" alt="" /></td>							<td>'.get_user_by('id', $entry['user_id'])->display_name.'</td> 							<td>'.$entry_meta['category'].'</td>							<td><a target="_blank" href="'.get_the_permalink().'?entry_id='.$entry_id.'">View</a></td>							</tr>';						}					}					if(wpc_if_contest_is_free($entry['contest_id'])){						if( $pop_categories !== 'all'){							if( $pop_categories == $entry_meta['category']){								$found_entries .= ' <tr>								<td><img src="'.$img_src.'" alt="" /></td>								<td>'.get_user_by('id', $entry['user_id'])->display_name.'</td> 								<td>'.$entry_meta['category'].'</td>								<td><a target="_blank" href="'.get_the_permalink().'?entry_id='.$entry_id.'">View</a></td>								</tr>';							}						}else{							$found_entries .= ' <tr '.$entry['contest_id'].' >							<td><img src="'.$img_src.'" alt="" /></td>							<td>'.get_user_by('id', $entry['user_id'])->display_name.'</td> 							<td>'.$entry_meta['category'].'</td>							<td><a target="_blank" href="'.get_the_permalink().'?entry_id='.$entry_id.'">View</a></td>							</tr>';						}					}																																		}				$found_entries .= '</table>				<div class="text-center">'.$search_again.'</div>				';				return $found_entries;			}else{				return "No Entry Found $search_again .";			}											}	}}if(!function_exists('wpc_get_addtional_field_by_contest_id')){	function wpc_get_addtional_field_by_contest_id($contest_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_contests';		$addtional_field = $wpdb->get_var( " SELECT additional_fields FROM $table_name WHERE id='$contest_id'  ");		return $addtional_field;	}}if(!function_exists('wpc_get_field_by_contest_id')){	function wpc_get_field_by_contest_id($contest_id){		if(wpc_if_contest_exist($contest_id)){			$addtional_fields = wpc_get_addtional_field_by_contest_id($contest_id);				if($addtional_fields){								$fields = '';				foreach( unserialize($addtional_fields) as $addtional_field ){					$fileds_id = $addtional_field['id'];					$label = $addtional_field['label'];					$id = $fileds_id;					$type  = $addtional_field['type'];					$field_markup = wpc_get_add_field_markup();					if(!array_key_exists($type, wpc_load_field_type())){						exit();					}					$markup =  $field_markup[$type];					$field_details = '					<input  id="field_type"  value="'.$type.'" name="'.$id.'_TYPE" type="hidden" />					<input name="field_id[]" value="'.$id.'" type="hidden" />										';					$markup = str_replace("__FIELDS_ID__", $id, $markup);					$markup = str_replace("__LABEL_VALUE__", $label, $markup);					if(isset($addtional_field['placeholder'])){						$markup = str_replace("__PLACEHOLDER_VALUE__", $addtional_field['placeholder'], $markup);					}					if(isset($addtional_field['options'])){						$markup = str_replace("__OPTION_VALUE__", $addtional_field['options'], $markup);					}					if(isset($addtional_field['require'])){						$require = $addtional_field['require'];						if($require == 'on'){								$markup = str_replace("__REQUIRE_VALUE__", 'checked', $markup);						}else{							$markup = str_replace("__REQUIRE_VALUE__", '', $markup);						}					}															$markup = str_replace("__FIELDS_DETAILS__", $field_details, $markup);										$fields .= $markup;				}				return $fields;			}		}	}}if(!function_exists('wpc_front_end_addtion_fields_markup')){	function wpc_front_end_addtion_fields_markup($contest_id){		$addtional_fields = wpc_get_addtional_field_by_contest_id($contest_id);		if( empty($addtional_fields) || $addtional_fields == '' ){			return;		}		$addtional_fields = unserialize($addtional_fields);		$markup = '';		foreach($addtional_fields as $addtional_field){			$id = $addtional_field['id'];			$type = $addtional_field['type'];			$label = $addtional_field['label'];			$placeholder = isset($addtional_field['placeholder']) ? $addtional_field['placeholder'] : '';			$options = isset($addtional_field['options']) ? isset($addtional_field['options']) : '';			$require = isset($addtional_field['require']) ? isset($addtional_field['require']) : 'off';			if($type == 'dropdown'){				$options = explode(",", $addtional_field['options']);				$opts = '';				foreach($options as $option){					$opts .= '<option value="'.$option.'">'.$option.'</option>';				}			}			if($type == 'radio'){				$options = explode(",", $addtional_field['options']);				$opts = '';				foreach($options as $option){					$opts .= '<input  '.($require == 'on' ? 'required' : '' ).'  value="'.$option.'" class="pop_input" type="radio" name="__RADIO_FIELD_NAME__" id="'.$id.'" > '.$option;				}			}									if($type == 'text'){				$markup .= '				<div class="pop_input_wrap">				<label for="'.$id.'">'.$label.' '.($require == 'on' ? '(*)' : '' ).'</label>				<input  id="'.$id.'" '.($require == 'on' ? 'required' : '' ).' placeholder="'.$placeholder.'"  name="'.$id.'[]" class="pop_input" type="text" />				</div>				';			}elseif($type == 'number'){				$markup .= '				<div class="pop_input_wrap">				<label for="'.$id.'">'.$label.'  '.($require == 'on' ? '(*)' : '' ).'</label>				<input  id="'.$id.'"  '.($require == 'on' ? 'required' : '' ).' placeholder="'.$placeholder.'" name="'.$id.'[]" class="pop_input" type="number" />				</div>				';			}elseif($type == 'dropdown'){				$markup .= '				<div class="pop_input_wrap">				<label for="'.$id.'">'.$label.'  '.($require == 'on' ? '(*)' : '' ).'</label>				<select class="pop_input" name="'.$id.'[]" id="'.$id.'"    '.($require == 'on' ? 'required' : '' ).' >				'.$opts.'				</select>				</div>				';			}elseif($type == 'radio'){				$markup .= '				<div class="pop_input_wrap">				<label for="'.$id.'">'.$label.'  '.($require == 'on' ? '(*)' : '' ).'</label>				'.$opts.'				<input id="'.$id.'" name="'.$id.'[]" type="hidden" />				</div>				';			}elseif($type == 'checkbox'){				$markup .= '				<div class="pop_input_wrap">				<label for="'.$id.'">'.$label.'  '.($require == 'on' ? '(*)' : '' ).'</label>				<input  id="'.$id.'"  '.($require == 'on' ? 'required' : '' ).' placeholder="'.$placeholder.'" name="'.$id.'[]" class="pop_input" type="checkbox" />				</div>				';			}else{							}					}		return $markup;	}}if(!function_exists('wpc_get_phase_two_voting_criterias')){	function wpc_get_phase_two_voting_criterias($contest_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_contests';		$voting_criterias = $wpdb->get_var( " SELECT phase_two_voting_creteria FROM $table_name WHERE id='$contest_id'  ");		return $voting_criterias;			}}if(!function_exists('WPC_get_judges_names')){	function WPC_get_judges_names(){		$judges = wpc_get_judges();		if(count($judges) > 0 ){			$judges_names = array();			foreach($judges as $judge){				$name = (get_userdata( $judge->ID )->first_name && get_userdata( $judge->ID )->last_name) ? get_userdata( $judge->ID )->first_name .' '. get_userdata( $judge->ID )->last_name : get_userdata( $judge->ID )->display_name;				$judges_names[$judge->ID] = $name;			}			return $judges_names;		}		return false;	}}if(!function_exists('wpc_get_judge_score_entry')){	function wpc_get_judge_score_entry($judge_id, $entry_id){		global $wpdb;		$table_name = $wpdb->prefix . 'wpc_phase_two_votiong';		$score = $wpdb->get_var( "SELECT vote FROM $table_name WHERE entry_id='$entry_id' AND judge_id='$judge_id' " );		if($score){ return $score; }														return false;	}}if(!function_exists('wpc_admin_paginate_function')){	function wpc_admin_paginate_function($item_per_page, $current_page, $total_records, $total_pages, $contest_id)	{		$pagination = '';		    if($total_pages > 0 && $total_pages != 1 && $current_page <= $total_pages){ //verify total pages and current page number    	$pagination .= '<ul class="pagination">';    	    	$right_links    = $current_page + 3;         $previous       = $current_page - 3; //previous link         $next           = $current_page + 1; //next link        $first_link     = true; //boolean var to decide our first link                if($current_page > 1){        	$previous_link = ($previous==0)?1:$previous;            $pagination .= '<li class="first"><a href="'.pop_pagination_url().'&pop_page=1" data-page="1" title="First">&laquo;</a></li>'; //first link            $pagination .= '<li><a href="'.pop_pagination_url().'&pop_page='.$previous_link.'" data-page="'.$previous_link.'" title="Previous">&lt;</a></li>'; //previous link                for($i = ($current_page-2); $i < $current_page; $i++){ //Create left-hand side links                	if($i > 0){                		$pagination .= '<li><a href="'.pop_pagination_url().'&pop_page='.$i.'" data-page="'.$i.'" title="Page'.$i.'">'.$i.'</a></li>';                	}                }               $first_link = false; //set first link to false        }                if($first_link){ //if current active page is first link        	$pagination .= '<li class="first active">'.$current_page.'</li>';        }elseif($current_page == $total_pages){ //if it's the last active link        $pagination .= '<li class="last active">'.$current_page.'</li>';        }else{ //regular current link        	$pagination .= '<li class="active">'.$current_page.'</li>';        }                for($i = $current_page+1; $i < $right_links ; $i++){ //create right-hand side links        	if($i<=$total_pages){        		$pagination .= '<li><a href="'.pop_pagination_url().'&pop_page='.$i.'" data-page="'.$i.'" title="Page '.$i.'">'.$i.'</a></li>';        	}        }        if($current_page < $total_pages){         	$next_link = ($i > $total_pages)? $total_pages : $i;                $pagination .= '<li><a href="'.pop_pagination_url().'&pop_page='.$next_link.'" data-page="'.$next_link.'" title="Next">&gt;</a></li>'; //next link                $pagination .= '<li class="last"><a href="'.pop_pagination_url().'&pop_page='.$total_pages.'" data-page="'.$total_pages.'" title="Last">&raquo;</a></li>'; //last link            }                        $pagination .= '</ul>';         }    return $pagination; //return pagination links}}if(!function_exists('wpc_remove_qs_key')){	function wpc_remove_qs_key($url, $key) {		return preg_replace('/(?:&|(\?))' . $key . '=[^&]*(?(1)&|)?/i', '$1', $url);	}}if(!function_exists('wpc_url_origin')){	function wpc_url_origin( $s, $use_forwarded_host = false )	{		$ssl      = ( ! empty( $s['HTTPS'] ) && $s['HTTPS'] == 'on' );		$sp       = strtolower( $s['SERVER_PROTOCOL'] );		$protocol = substr( $sp, 0, strpos( $sp, '/' ) ) . ( ( $ssl ) ? 's' : '' );		$port     = $s['SERVER_PORT'];		$port     = ( ( ! $ssl && $port=='80' ) || ( $ssl && $port=='443' ) ) ? '' : ':'.$port;		$host     = ( $use_forwarded_host && isset( $s['HTTP_X_FORWARDED_HOST'] ) ) ? $s['HTTP_X_FORWARDED_HOST'] : ( isset( $s['HTTP_HOST'] ) ? $s['HTTP_HOST'] : null );		$host     = isset( $host ) ? $host : $s['SERVER_NAME'] . $port;		return $protocol . '://' . $host;	}}if(!function_exists('wpc_full_url')){	function wpc_full_url( $s, $use_forwarded_host = false )	{		return wpc_url_origin( $s, $use_forwarded_host ) . $s['REQUEST_URI'];	}}if(!function_exists('pop_pagination_url')){	function pop_pagination_url(){		$absolute_url = wpc_full_url( $_SERVER );		return wpc_remove_qs_key($absolute_url, 'pop_page');	}}if(!function_exists('wpc_paginate_function')){	function wpc_paginate_function($item_per_page, $current_page, $total_records, $total_pages, $contest_id)	{		$pagination = '';		$get_param = isset($_GET['pop_category']) ? '&' : '?';    if($total_pages > 0 && $total_pages != 1 && $current_page <= $total_pages){ //verify total pages and current page number    	$pagination .= '<ul class="pagination">';    	    	$right_links    = $current_page + 3;         $previous       = $current_page - 3; //previous link         $next           = $current_page + 1; //next link        $first_link     = true; //boolean var to decide our first link                if($current_page > 1){        	$previous_link = ($previous==0)?1:$previous;            $pagination .= '<li class="first"><a href="'.pop_pagination_url().$get_param.'pop_page=1" data-page="1" title="First">&laquo;</a></li>'; //first link            $pagination .= '<li><a href="'.pop_pagination_url().$get_param.'pop_page='.$previous_link.'" data-page="'.$previous_link.'" title="Previous">&lt;</a></li>'; //previous link                for($i = ($current_page-2); $i < $current_page; $i++){ //Create left-hand side links                	if($i > 0){                		$pagination .= '<li><a href="'.pop_pagination_url().$get_param.'pop_page='.$i.'" data-page="'.$i.'" title="Page'.$i.'">'.$i.'</a></li>';                	}                }               $first_link = false; //set first link to false        }                if($first_link){ //if current active page is first link        	$pagination .= '<li class="first active">'.$current_page.'</li>';        }elseif($current_page == $total_pages){ //if it's the last active link        $pagination .= '<li class="last active">'.$current_page.'</li>';        }else{ //regular current link        	$pagination .= '<li class="active">'.$current_page.'</li>';        }                for($i = $current_page+1; $i < $right_links ; $i++){ //create right-hand side links        	if($i<=$total_pages){        		$pagination .= '<li><a href="'.pop_pagination_url().$get_param.'pop_page='.$i.'" data-page="'.$i.'" title="Page '.$i.'">'.$i.'</a></li>';        	}        }        if($current_page < $total_pages){         	$next_link = ($i > $total_pages)? $total_pages : $i;                $pagination .= '<li><a href="'.pop_pagination_url().$get_param.'pop_page='.$next_link.'" data-page="'.$next_link.'" title="Next">&gt;</a></li>'; //next link                $pagination .= '<li class="last"><a href="'.pop_pagination_url().$get_param.'pop_page='.$total_pages.'" data-page="'.$total_pages.'" title="Last">&raquo;</a></li>'; //last link            }                        $pagination .= '</ul>';         }    return $pagination; //return pagination links}}if(!function_exists('wpc_filter_current_category_entries')){	function wpc_filter_current_category_entries($all_entries_id, $current_category){		if($current_category == 'all' || $current_category == ''){			return $all_entries_id;		}		if(!$all_entries_id){			return  array();		}		if(count($all_entries_id) == 0 ){			return  array();		}						$filtered_cats = array();		foreach($all_entries_id as $entry_id){			$entry_values = wpc_get_entry($entry_id);			$entry_meta = unserialize( $entry_values['entry_meta'] );						if($current_category == $entry_meta['category']){				$filtered_cats[] = $entry_id;			}		}								return $filtered_cats;					}}if(!function_exists('wpc_number_of_active_contest')){	function wpc_number_of_active_contest(){		$active_contest = array();		if(wpc_get_all_contest_id()){			foreach(wpc_get_all_contest_id() as $contest_id ){				$WPC_contest_settings = new WPC_contest_settings($contest_id);				$settings = $WPC_contest_settings->WPC_the_contest_settings();				if($settings['contest_on_off'] == 'on'){					$active_contest[] = $contest_id;				}			}		}		return $active_contest;	}}